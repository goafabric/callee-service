apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "application.fullname" . }}
  labels:
    {{- include "application.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "application.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.service.port }}"
        prometheus.io/scheme: "http"
        prometheus.io/path: "/actuator/prometheus"
      labels:
        {{- include "application.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.initContainers }}
      initContainers:
        {{- toYaml . | nindent 8 }}
        {{- end }}

      {{ if .Values.image.pullSecrets }}
      imagePullSecrets:
        - name: {{ .Values.image.pullSecrets }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}{{ .Values.image.arch }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP

          envFrom:
            - configMapRef:
                name: {{ include "application.fullname" . }}-config
            - configMapRef:
                name: {{ include "application.fullname" . }}-config-log
            - secretRef:
                name: {{ include "application.fullname" . }}-secret

          #resources and commands and args
          {{ if and (ne .Values.image.arch "-native") (ne .Values.image.arch "-native-arm64v8") }}
            {{- with .Values.resourcesAnnotations }}
              {{- toYaml . | nindent 10 }}
              {{- end }}
          {{- end }}

          {{ if or (eq .Values.image.arch "-native") (eq .Values.image.arch "-native-arm64v8") }}
            {{- with .Values.nativeAnnotations }}
              {{- toYaml . | nindent 10 }}
              {{- end }}
          {{- end }}

          readinessProbe:
            httpGet:
              path: /actuator/health
              port: http
              scheme: {{ .Values.readinessProbe.scheme | default "HTTP" }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: 10
            timeoutSeconds: 10
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: http
              scheme: {{ .Values.readinessProbe.scheme | default "HTTP" }}
            initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
            periodSeconds: 10
            timeoutSeconds: 10
            failureThreshold: 3

          volumeMounts:
            - mountPath: /usr/share/logs
              name: {{ include "application.fullname" . }}-applogs
            - mountPath: /usr/share/truststore
              name: {{ include "application.fullname" . }}-trust-store-volume

      volumes:
        - name: {{ include "application.fullname" . }}-applogs
          emptyDir: {}
        - name: {{ include "application.fullname" . }}-trust-store-volume
          secret:
            secretName: trust-store-secret


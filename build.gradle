plugins {
	id 'org.springframework.boot' version '3.0.0-M5'
	id 'io.spring.dependency-management' version '1.0.14.RELEASE'
	id 'org.graalvm.buildtools.native' version '0.9.14'
	id 'com.google.cloud.tools.jib' version '3.2.1'
	id 'jacoco'
	id 'java'
}

ext {
	set('dockerRegistry', "goafabric")
	set('baseImage', "ibm-semeru-runtimes:open-17.0.3_7-jre-focal@sha256:e89df25f95379321ef61d5119eee68c28884ff8f8c5deaf2d474f3cdb1dbbb7e")
}

dependencies {
	constraints {
		implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.0-M7'
		implementation 'org.mapstruct:mapstruct:1.5.2.Final'
		annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.2.Final'
	}

	dependencyManagement.imports {
		mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2022.0.0-M5'
	}
}

group = 'org.goafabric'
version = '3.0.0-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
	maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots'}
	mavenCentral()
}

dependencies {
	//web
	implementation 'org.springframework.boot:spring-boot-starter-web'

	//monitoring
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.micrometer:micrometer-registry-prometheus'

	implementation 'io.micrometer:micrometer-tracing-bridge-brave'
	implementation 'io.zipkin.reporter2:zipkin-reporter-brave'

	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui'

	//crosscuting
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-aop'

	//code generation
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	implementation 'org.mapstruct:mapstruct'
	annotationProcessor 'org.mapstruct:mapstruct-processor'

	//test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
	useJUnitPlatform()
	exclude '**/*NRIT*'
	finalizedBy jacocoTestReport
}

jib {
	from.image = "${baseImage}"
	from.platforms = [com.google.cloud.tools.jib.gradle.PlatformParameters.of("linux/amd64"), com.google.cloud.tools.jib.gradle.PlatformParameters.of("linux/arm64")]
	to.image = "${dockerRegistry}/${project.name}:${project.version}"
	container.jvmFlags = ['-Xms256m', '-Xmx256m']
}

//native image
graalvmNative.binaries.main.buildArgs.add('--enable-url-protocols=http') //https://graalvm.github.io/native-build-tools/0.9.5/gradle-plugin.html#_native_image_optio

tasks.named('bootBuildImage') {
	builder = 'paketobuildpacks/builder:tiny'
	buildpacks = ["gcr.io/paketo-buildpacks/java-native-image:7.35.0"]
	bootBuildImage.imageName = "${dockerRegistry}/${project.name}-native:${project.version}"
	environment = ['BP_NATIVE_IMAGE': 'true', 'BP_JVM_VERSION': '17', 'BP_NATIVE_IMAGE_BUILD_ARGUMENTS': '-J-Xmx6000m --enable-url-protocols=http']
}

task dockerRun(type:Exec) { commandLine 'docker', 'run', "--rm", "${dockerRegistry}/${project.name}-native:${project.version}", '-check-integrity' }
task dockerPush(type:Exec) {
	commandLine 'docker', 'push', "${dockerRegistry}/${project.name}-native:${project.version}"
	dependsOn(dockerRun)
}
plugins {
	id 'org.springframework.boot' version '3.0.0-M4'
	id 'io.spring.dependency-management' version '1.0.12.RELEASE'
	id 'org.graalvm.buildtools.native' version '0.9.13'
	id 'com.google.cloud.tools.jib' version '3.2.1'
	id 'jacoco'
	id 'java'
}

ext {
	set('dockerRegistry', "goafabric")
	set('baseImage', "ibm-semeru-runtimes:open-17.0.3_7-jre-focal@sha256:e89df25f95379321ef61d5119eee68c28884ff8f8c5deaf2d474f3cdb1dbbb7e")
}

dependencies {
	constraints {
		implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.0-M5-SNAPSHOT'
		implementation 'org.mapstruct:mapstruct:1.5.2.Final'
		annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.2.Final'
	}

	dependencyManagement.imports {
		mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2022.0.0-M4'
	}
}

group = 'org.goafabric'
version = '3.0.0-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
	maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots'}
	mavenCentral()
}

dependencies {
	//web
	implementation 'org.springframework.boot:spring-boot-starter-web'

	//monitoring
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'io.micrometer:micrometer-registry-prometheus'

	//implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
	//implementation 'org.springframework.cloud:spring-cloud-sleuth-zipkin'

	//implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui'

	//crosscuting
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-aop'

	//code generation
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	implementation 'org.mapstruct:mapstruct'
	annotationProcessor 'org.mapstruct:mapstruct-processor'

	//test
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}
jacocoTestReport.dependsOn(test)

jib {
	from.image = "${baseImage}"
	from.platforms = [com.google.cloud.tools.jib.gradle.PlatformParameters.of("linux/amd64"), com.google.cloud.tools.jib.gradle.PlatformParameters.of("linux/arm64")]
	to.image = "${dockerRegistry}/${project.name}"
	to.tags = project.provider{[version]}
	container.jvmFlags = ['-Xms256m', '-Xmx256m']
}


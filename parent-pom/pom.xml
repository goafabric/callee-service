<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.goafabric</groupId>
    <artifactId>goa-parent</artifactId>
    <version>2.5.0</version>
    <packaging>pom</packaging>
    <name>goa parent pom</name>
    <description>goa parent pom</description>

    <scm>
        <url>https://github.com/goafabric/goa-parent.git</url>
        <tag>HEAD</tag>
    </scm>

    <properties>
        <!-- Project -->
        <java.version>11</java.version>
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

        <!-- Docker -->
        <docker.registry>docker.io/goafabric</docker.registry>

        <!-- Spring Boot -->
        <spring.boot.version>2.5.0</spring.boot.version>
        <spring.cloud.version>2020.0.2</spring.cloud.version>
        <spring.native.version>0.9.2</spring.native.version>

        <!-- have to be synced manually with spring-boot-dependencies because of annotation and build processors -->
        <lombok.version>1.18.20</lombok.version>
        <hibernate.version>5.4.31.Final</hibernate.version>
        
        <!-- 3rd Party -->
        <mapstruct.version>1.4.2.Final</mapstruct.version>
        <lombok.mapstruct.binding.version>0.2.0</lombok.mapstruct.binding.version>
        <joda-time.version>2.10.10</joda-time.version>

        <springfox-swagger.version>3.0.0</springfox-swagger.version>

        <resilience4j.version>1.7.0</resilience4j.version>
        <jasypt-spring-boot-starter.version>3.0.3</jasypt-spring-boot-starter.version>
        <jasypt-hibernate5.version>1.9.3</jasypt-hibernate5.version>
        <opentracing-spring-jaeger-web-starter.version>3.2.2</opentracing-spring-jaeger-web-starter.version>

        <!-- Test -->
        <contiperf.version>2.3.4</contiperf.version>

        <!-- Build Plugins -->
        <maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>
        <maven-surefire-plugin.version>2.22.2</maven-surefire-plugin.version>
        <maven-failsafe-plugin.version>2.18.1</maven-failsafe-plugin.version>  <!-- warning tests crash with strange noclassdeffound when upgrading to failsafe 2.22.2 -->
        <maven-assembly-plugin.version>2.5.5</maven-assembly-plugin.version>

        <!-- Release and Deploy Plugins -->
        <maven-release-plugin.version>2.5.3</maven-release-plugin.version>
        <maven-deploy-plugin.version>2.8.2</maven-deploy-plugin.version>

        <!-- Further Build Plugins -->
        <jacoco-maven-plugin.version>0.8.6</jacoco-maven-plugin.version>
        <jib-maven-plugin.version>2.8.0</jib-maven-plugin.version>

        <!-- Sonarqube -->
        <sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
        <sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis>
        <sonar.language>java</sonar.language>
        <maven.javadoc.skip>true</maven.javadoc.skip>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring.boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring.cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <dependency>
                <groupId>org.mapstruct</groupId>
                <artifactId>mapstruct</artifactId>
                <version>${mapstruct.version}</version>
            </dependency>

            <!-- needs to be managed here again (vs spring boot dependendencies), because of annotation processor and lombok upgrades often surprise us with breaking changes -->
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
                <scope>provided</scope>
            </dependency>

            <dependency>
                <groupId>joda-time</groupId>
                <artifactId>joda-time</artifactId>
                <version>${joda-time.version}</version>
            </dependency>

            <dependency>
                <groupId>io.springfox</groupId>
                <artifactId>springfox-boot-starter</artifactId>
                <version>${springfox-swagger.version}</version>
            </dependency>

            <dependency>
                <groupId>com.github.ulisesbocchio</groupId>
                <artifactId>jasypt-spring-boot-starter</artifactId>
                <version>${jasypt-spring-boot-starter.version}</version>
            </dependency>

            <dependency>
                <groupId>org.jasypt</groupId>
                <artifactId>jasypt-hibernate5</artifactId>
                <version>${jasypt-hibernate5.version}</version>
            </dependency>

            <dependency>
                <groupId>io.github.resilience4j</groupId>
                <artifactId>resilience4j-spring-boot2</artifactId>
                <version>${resilience4j.version}</version>
            </dependency>

            <dependency>
                <groupId>io.opentracing.contrib</groupId>
                <artifactId>opentracing-spring-jaeger-web-starter</artifactId>
                <version>${opentracing-spring-jaeger-web-starter.version}</version>
            </dependency>

            <dependency>
                <groupId>org.databene</groupId>
                <artifactId>contiperf</artifactId>
                <version>${contiperf.version}</version>
                <scope>test</scope>
            </dependency>

        </dependencies>
    </dependencyManagement>

    <build>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>${spring.boot.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${maven-surefire-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven-compiler-plugin.version}</version>
                    <configuration>
                        <source>${maven.compiler.source}</source>
                        <target>${maven.compiler.target}</target>
                        <!-- mapstruct now needs mapstruct-binding configured like this, also order seems to be important first mapstruct than lombok -->
                        <annotationProcessorPaths>
                            <path>
                                <groupId>org.mapstruct</groupId>
                                <artifactId>mapstruct-processor</artifactId>
                                <version>${mapstruct.version}</version>
                            </path>
                            <path>
                                <groupId>org.projectlombok</groupId>
                                <artifactId>lombok</artifactId>
                                <version>${lombok.version}</version>
                            </path>
                            <path>
                                <groupId>org.projectlombok</groupId>
                                <artifactId>lombok-mapstruct-binding</artifactId>
                                <version>${lombok.mapstruct.binding.version}</version>
                            </path>
                        </annotationProcessorPaths>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>${maven-failsafe-plugin.version}</version>
                <configuration>
                    <includes>
                        <include>**/*IT.java</include>
                    </includes>
                    <excludes>
                        <exclude>**/*NRIT.java</exclude>
                    </excludes>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacoco-maven-plugin.version}</version>
                <configuration>
                    <destFile>${sonar.jacoco.reportPaths}</destFile>
                    <append>true</append>
                </configuration>
                <executions>
                    <execution>
                        <id>prepare-agent</id>
                        <phase>process-test-resources</phase>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>

                    <execution>
                        <id>report</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>fat-jar</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>repackage</id>
                                <goals>
                                    <goal>repackage</goal>
                                </goals>
                                <configuration>
                                    <layout>JAR</layout>
                                    <!-- needed for junit5 integration tests not to crash with no classdeffound because of the two jars-->
                                    <classifier>fat</classifier>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>docker-image-amd64</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.google.cloud.tools</groupId>
                        <artifactId>jib-maven-plugin</artifactId>
                        <version>${jib-maven-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>docker-image-amd64</id> <!-- we need a unique id ALSO here, otherwise maven will only deploy one of the profiles if both are selected -->
                                <phase>install</phase>
                                <goals>
                                    <goal>build</goal>
                                </goals>
                                <configuration>
                                    <from>
                                        <image>adoptopenjdk/openjdk11-openj9:x86_64-debian-jre-11.0.10_9_openj9-0.24.0</image>
                                        <!-- <image>adoptopenjdk/openjdk16-openj9:x86_64-debian-jre-16_36_openj9-0.25.0</image> -->
                                    </from>
                                    <to>
                                        <image>${docker.registry}/${project.artifactId}</image>
                                        <tags>
                                            <tag>${project.version}</tag>
                                        </tags>
                                    </to>
                                    <container>
                                        <jvmFlags>
                                            <jvmFlag>-Xms256m</jvmFlag>
                                            <jvmFlag>-Xmx256m</jvmFlag>
                                            <jvmFlag>-Djava.security.egd=file:/dev/./urandom</jvmFlag>
                                        </jvmFlags>
                                        <volumes>
                                            <volume>/tmp</volume>
                                        </volumes>
                                    </container>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>docker-image-arm64v8</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.google.cloud.tools</groupId>
                        <artifactId>jib-maven-plugin</artifactId>
                        <version>${jib-maven-plugin.version}</version>
                        <executions>
                            <execution>
                                <id>docker-image-arm64v8</id> <!-- we need a unique id ALSO here, otherwise maven will only deploy one of the profiles if both are selected -->
                                <phase>install</phase>
                                <goals>
                                    <goal>build</goal>
                                </goals>
                                <configuration>
                                    <from>
                                        <image>adoptopenjdk/openjdk11-openj9:aarch64-debian-jre-11.0.10_9_openj9-0.24.0</image>
                                        <!-- <image>adoptopenjdk/openjdk16-openj9:aarch64-debian-jre-16_36_openj9-0.25.0</image> -->
                                    </from>
                                    <to>
                                        <image>${docker.registry}/${project.artifactId}-arm64v8</image>
                                        <tags>
                                            <tag>${project.version}</tag>
                                        </tags>
                                    </to>
                                    <container>
                                        <jvmFlags>
                                            <jvmFlag>-Xms256m</jvmFlag>
                                            <jvmFlag>-Xmx256m</jvmFlag>
                                            <jvmFlag>-Djava.security.egd=file:/dev/./urandom</jvmFlag>
                                        </jvmFlags>
                                        <volumes>
                                            <volume>/tmp</volume>
                                        </volumes>
                                    </container>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>docker-image-native</id>
            <dependencies>
                <dependency>
                    <groupId>org.springframework.experimental</groupId>
                    <artifactId>spring-native</artifactId>
                    <version>${spring.native.version}</version>
                </dependency>
            </dependencies>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.springframework.boot</groupId>
                        <artifactId>spring-boot-maven-plugin</artifactId>
                        <version>${spring.boot.version}</version>
                        <configuration>
                            <excludes>
                                <exclude>
                                    <groupId>org.projectlombok</groupId>
                                    <artifactId>lombok</artifactId>
                                </exclude>
                            </excludes>
                            <image>
                                <name>${docker.registry}/${project.artifactId}-native:${project.version}</name>
                                <builder>paketobuildpacks/builder:base</builder> <!-- to get wget or curl we need build:full but this blows up the image to 700MB -->
                                <env>
                                    <BP_NATIVE_IMAGE>true</BP_NATIVE_IMAGE>
                                    <BP_JVM_VERSION>11</BP_JVM_VERSION>
                                </env>
                            </image>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.springframework.experimental</groupId>
                        <artifactId>spring-aot-maven-plugin</artifactId>
                        <version>${spring.native.version}</version>
                        <executions>
                            <execution>
                                <id>test-generate</id>
                                <goals>
                                    <goal>test-generate</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>generate</id>
                                <goals>
                                    <goal>generate</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- Spring Native documentation claims that hibernate enhance is needed, seems to work without it
                    https://docs.jboss.org/hibernate/orm/5.4/topical/html_single/bytecode/BytecodeEnhancement.html#_build_time_enhancement -->
                    <!--
                    <plugin>
                        <groupId>org.hibernate.orm.tooling</groupId>
                        <artifactId>hibernate-enhance-maven-plugin</artifactId>
                        <version>${hibernate.version}</version>
                        <executions>
                            <execution>
                                <configuration>
                                    <failOnError>true</failOnError>
                                    <enableLazyInitialization>true</enableLazyInitialization>
                                    <enableDirtyTracking>true</enableDirtyTracking>
                                    <enableAssociationManagement>true</enableAssociationManagement>
                                    <enableExtendedEnhancement>false</enableExtendedEnhancement>
                                </configuration>
                                <goals>
                                    <goal>enhance</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    -->
                    <plugin>
                        <!-- workaround for missing publish functionality, see: https://docs.spring.io/spring-boot/docs/current/maven-plugin/reference/htmlsingle/#build-image-example-publish -->
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>exec-maven-plugin</artifactId>
                        <version>3.0.0</version>
                        <executions>
                            <execution>
                                <phase>install</phase>
                                <goals>
                                    <goal>exec</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <executable>docker</executable>
                            <arguments>
                                <argument>push</argument>
                                <argument>${docker.registry}/${project.artifactId}-native:${project.version}</argument>
                            </arguments>
                        </configuration>
                    </plugin>
                </plugins>
            </build>

            <repositories>
                <repository>
                    <id>spring-releases</id>
                    <name>Spring Releases</name>
                    <url>https://repo.spring.io/release</url>
                </repository>
            </repositories>
            <pluginRepositories>
                <pluginRepository>
                    <id>spring-releases</id>
                    <name>Spring Releases</name>
                    <url>https://repo.spring.io/release</url>
                </pluginRepository>
            </pluginRepositories>
        </profile>
    </profiles>
</project>